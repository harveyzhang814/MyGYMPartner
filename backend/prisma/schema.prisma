// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  passwordHash  String   @map("password_hash")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  avatarUrl     String?  @map("avatar_url")
  dateOfBirth   DateTime? @map("date_of_birth") @db.Date
  gender        Gender?
  heightCm      Int?     @map("height_cm")
  weightKg      Decimal? @map("weight_kg") @db.Decimal(5, 2)
  fitnessLevel  FitnessLevel? @map("fitness_level")
  timezone      String   @default("UTC")
  language      String   @default("zh-CN")
  isActive      Boolean  @default(true) @map("is_active")
  isVerified    Boolean  @default(false) @map("is_verified")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  trainingGroups TrainingGroup[]
  exerciseSessions ExerciseSession[]
  userFavoriteExercises UserFavoriteExercise[]
  createdExercises Exercise[]

  @@map("users")
}

model Exercise {
  id              String   @id @default(uuid())
  name            String
  nameZh          String?  @map("name_zh")
  description     String?
  descriptionZh   String?  @map("description_zh")
  instructions    String[]
  instructionsZh  String[] @map("instructions_zh")
  muscleGroups    String[] @map("muscle_groups")
  equipment       String?
  difficultyLevel DifficultyLevel? @map("difficulty_level")
  category        String?
  images          Json?
  videos          Json?
  gifUrl          String?  @map("gif_url")
  createdBy       String?  @map("created_by")
  isTemplate      Boolean  @default(false) @map("is_template")
  isPublic        Boolean  @default(true) @map("is_public")
  usageCount      Int      @default(0) @map("usage_count")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  creator         User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  trainingGroups  TrainingGroup[]
  exerciseRecords ExerciseRecord[]
  userFavoriteExercises UserFavoriteExercise[]

  @@map("exercises")
}

model UserFavoriteExercise {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  exerciseId String   @map("exercise_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("user_favorite_exercises")
}

model TrainingGroup {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  name            String
  exerciseId      String   @map("exercise_id")
  description     String?
  sets            Int
  repsMin         Int?     @map("reps_min")
  repsMax         Int?     @map("reps_max")
  weightMin       Decimal? @map("weight_min") @db.Decimal(8, 2)
  weightMax       Decimal? @map("weight_max") @db.Decimal(8, 2)
  restTimeSeconds Int      @default(120) @map("rest_time_seconds")
  notes           String?
  isTemplate      Boolean  @default(false) @map("is_template")
  tags            String[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise        Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  trainingGroupSets TrainingGroupSet[]
  exerciseRecords ExerciseRecord[]

  @@map("training_groups")
}

model TrainingGroupSet {
  id              String   @id @default(uuid())
  trainingGroupId String   @map("training_group_id")
  setNumber       Int      @map("set_number")
  reps            Int?
  weight          Decimal? @db.Decimal(8, 2)
  restTimeSeconds Int?     @map("rest_time_seconds")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  trainingGroup TrainingGroup @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)

  @@unique([trainingGroupId, setNumber])
  @@map("training_group_sets")
}

model ExerciseSession {
  id                    String   @id @default(uuid())
  userId                String   @map("user_id")
  trainingPlanId        String?  @map("training_plan_id")
  name                  String
  sessionDate           DateTime @map("session_date") @db.Date
  startTime             DateTime? @map("start_time")
  endTime               DateTime? @map("end_time")
  totalDurationMinutes  Int?     @map("total_duration_minutes")
  status                SessionStatus @default(IN_PROGRESS)
  notes                 String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseRecords ExerciseRecord[]

  @@map("exercise_sessions")
}

model ExerciseRecord {
  id              String   @id @default(uuid())
  sessionId       String   @map("session_id")
  trainingGroupId String   @map("training_group_id")
  exerciseId      String   @map("exercise_id")
  orderIndex      Int      @map("order_index")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  session           ExerciseSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  trainingGroup     TrainingGroup      @relation(fields: [trainingGroupId], references: [id], onDelete: Restrict)
  exercise          Exercise           @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  exerciseSetRecords ExerciseSetRecord[]

  @@unique([sessionId, orderIndex])
  @@map("exercise_records")
}

model ExerciseSetRecord {
  id                String   @id @default(uuid())
  exerciseRecordId  String   @map("exercise_record_id")
  setNumber         Int      @map("set_number")
  reps              Int?
  weight            Decimal? @db.Decimal(8, 2)
  restTimeSeconds   Int?     @map("rest_time_seconds")
  isCompleted       Boolean  @default(false) @map("is_completed")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  exerciseRecord ExerciseRecord @relation(fields: [exerciseRecordId], references: [id], onDelete: Cascade)

  @@unique([exerciseRecordId, setNumber])
  @@map("exercise_set_records")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
  CANCELLED
}